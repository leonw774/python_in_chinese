類別 物品 定義為
    函式 __init__(自身, 名字, 價值, 重量, 容量) 定義為
        自身的名字 設成 名字
        自身的價值 設成 價值
        自身的重量 設成 重量
        自身的容量 設成 容量

背包限重 設成 250
背包限容 設成 250
可選物品 設成 [
    物品("藥水", 3000, 3, 25),
    物品("食物", 1800, 2, 15),
    物品("黃金", 2500, 20, 2)
]

函式 背包動態規劃(可選物品, 最大重量, 最大容量) 定義為
    價值表 設成 [[0] 乘 (最大重量加1) 凡 _ 在 範圍(最大容量+1)]
    物品選擇 設成 [[-1] 乘 (最大重量加1) 凡 _ 在 範圍(最大容量+1)]
    # 開始搜尋
    凡 重量 在 範圍(最大重量加1) 則為
        凡 容量 在 範圍(最大容量加1) 則為
            凡 物品編號, 物品 在 列舉(可選物品) 則為
                若 重量大於等於物品的重量 且 容量大於等於物品的容量 則為
                    新價值 設成 價值表[重量減物品的重量][容量減物品的容量] + 物品的價值
                    若 新價值大於價值表[重量][容量] 則為
                        價值表[重量][容量] 設成 新價值
                        物品選擇[重量][容量] 設成 物品編號

    # 找到每個物品每幾個
    解答物品數量 設成 [0] 乘 長度(可選物品)
    重 設成 最大重量
    容 設成 最大容量
    當 物品選擇[重][容] 不等於 -1 則為
        解答物品數量[物品選擇[重][容]] 加並設成 1
        物 設成 可選物品[物品選擇[重][容]]
        重 減並設成 物的重量
        容 減並設成 物的容量

    回傳 解答物品數量

解答物品數量 設成 背包動態規劃(可選物品, 背包限重, 背包限容)
印出("最大價值是:", 總和(
    物品數量 乘 可選物品[物品編號].價值
    凡 物品編號, 物品數量 在 列舉(解答物品數量)
))
印出("使用的藥水、食物、黃金數量分別是:", "、".join(映射(字串, 解答物品數量)))
印出("使用的總重是:", 總和(
    物品數量 乘 可選物品[物品編號].重量
    凡 物品編號, 物品數量 在 列舉(解答物品數量)
))
